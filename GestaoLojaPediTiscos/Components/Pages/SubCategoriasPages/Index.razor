@page "/subcategorias"

@attribute [Authorize(Roles = "Admin, Funcionario")]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using GestaoLojaPediTiscos.Entities
@using GestaoLojaPediTiscos.Data

@rendermode InteractiveServer

@implements IAsyncDisposable

@inject IDbContextFactory<GestaoLojaPediTiscos.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Produtos</PageTitle>

<h1>Listagem de Produtos</h1>

@* Para Mensagens *@
@{
    var query = new Uri(NavigationManager.Uri).Query;
    var message = System.Web.HttpUtility.ParseQueryString(query).Get("message");
    if (!string.IsNullOrEmpty(message)){
        <div class="alert alert-success">@message</div>
    }
}

<p>
    <a title="Nova categoria!" href="subcategorias/create"><img src="/img/novo.png" style="height:50px" /></a>
</p>

<QuickGrid Class="table" Items="@subCategoriasQueryable" @ref="refgrid" Pagination="@pagination">

    <TemplateColumn Context="subcategorias">
        @if (subcategorias.Imagem is not null && subcategorias.Imagem.Length > 0){
            <img title="Imagem Actual: @subcategorias.UrlImagem" id="imagePreview" class="img-thumbnail  mt-2" src="data:image/*;base64,@(Convert.ToBase64String(subcategorias.Imagem))" style="width:100px">
        }
        else{
            <img id="imagePreview" class="img-thumbnail mt-2" src="img/noproductstrans.png" style="width:100px;">
        }

    </TemplateColumn>

    <PropertyColumn Property="subcategorias => subcategorias.Nome" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @onchange="PesquisaSubCategoria" placeholder="Pesquisar nome da categoria..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>

    <PropertyColumn Property="subcategorias => subcategorias.Ordem" Title="Ordem" Sortable="true" />

    <PropertyColumn Property="subcategorias => subcategorias.Categoria.Nome" Title="Categoria" Sortable="true" />

    <TemplateColumn Context="subcategorias">
        <a title="Editar" href="@($"subcategorias/edit?id={subcategorias.Id}")"><img title="Editar" src="/img/editicon.png" style="height:30px" /></a> |
        <a title="Detalhes" href="@($"subcategorias/details?id={subcategorias.Id}")"><img title="Detalhes" src="/img/detailsicon.png" style="height:30px" /></a> |
        <a title="Apagar" href="@($"subcategorias/delete?id={subcategorias.Id}")"><img title="Apagar" src="/img/deleteicon.png" style="height:30px" /></a>
    </TemplateColumn>
</QuickGrid>
<div class="page-size-chooser">
    Categorias por página:
    <select @bind="@pagination.ItemsPerPage">
        <option>5</option>
        <option>10</option>
        <option>15</option>
    </select>
</div>
<div class="card-footer">
    <Paginator State="@pagination" />
</div>


@code {
    private ApplicationDbContext context = default!;

    QuickGrid<SubCategorias>? refgrid;

    // Paginação
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };

    List<SubCategorias> subCategoriasList = new();
    IQueryable<SubCategorias>? subCategoriasQueryable;

    protected override void OnInitialized(){
        context = DbFactory.CreateDbContext();

        subCategoriasQueryable = Enumerable.Empty<SubCategorias>().AsQueryable();


        CarregaSubCategorias();
        ConvertListToQueryable();
    }
    private IList<SubCategorias> CarregaSubCategorias(){
        subCategoriasList = context.SubCategorias
            .Include("Categoria")
            .OrderBy(x => x.Ordem)
            .ThenBy(a => a.Nome)
            .ThenBy(a => a.Categoria.Nome)
            .ToList();
        return subCategoriasList;
    }

    // Converte Lista para Queryable
    private void ConvertListToQueryable()
    {
        subCategoriasQueryable = Enumerable.Empty<SubCategorias>().AsQueryable();

        if (subCategoriasList is null) return;

        foreach (var subcategoria in subCategoriasList.OrderBy(o => o.Id))
            subCategoriasQueryable = subCategoriasQueryable.Concat(new[] { subcategoria }.AsQueryable());
    }

    // Pesquisa por Nome
    void PesquisaSubCategoria(ChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(e.Value!.ToString())){
            var result = subCategoriasQueryable.Where(c => c.Nome!.Contains(e.Value!.ToString()!, StringComparison.CurrentCultureIgnoreCase)).ToList();
            subCategoriasQueryable = Enumerable.Empty<SubCategorias>().AsQueryable();

            if (result.Count == 0)
                return;

            if (result.Any())
                foreach (var subcategoria in result.OrderBy(o => o.Id))
                    subCategoriasQueryable = subCategoriasQueryable.Concat(new[] { subcategoria }.AsQueryable());
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
