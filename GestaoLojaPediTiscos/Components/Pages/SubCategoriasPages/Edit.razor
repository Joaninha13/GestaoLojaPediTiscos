@page "/subcategorias/edit"

@attribute [Authorize(Roles = "Admin, Funcionario")]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using GestaoLojaPediTiscos.Entities
@inject IDbContextFactory<GestaoLojaPediTiscos.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Editar</PageTitle>

<h1>Editar SubCategoria</h1>

<hr />
@if (subcategorias is null){
    <p><em>Carregando...</em></p>
}
else{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="subcategorias" OnValidSubmit="UpdateSubCategorias" enctype="multipart/form-data" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="subcategorias.Id" value="@subcategorias.Id" />

                <div class="mb-3">

                    <div>
                        @if (subcategorias.Imagem is not null){
                            <img title="Imagem Actual: @subcategorias.UrlImagem" id="imagePreview" class="img-thumbnail  mt-2" src="data:image/*;base64,@(Convert.ToBase64String(subcategorias.Imagem))" style="width:100px">
                        }
                        else{
                            <img id="imagePreview" class="img-thumbnail mt-2" src="img/noproductstrans.png" style="width:100px;">
                        }
                    </div>

                    <label for="nome" class="form-label">Nome:</label>
                    <InputText id="nome" @bind-Value="subcategorias.Nome" class="form-control" />
                    <ValidationMessage For="() => subcategorias.Nome" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="ordem" class="form-label">Ordem:</label>
                    <InputNumber id="ordem" @bind-Value="subcategorias.Ordem" class="form-control" />
                    <ValidationMessage For="() => subcategorias.Ordem" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="categoriaid" class="form-label">Categoria Actual:@catActual</label>
                    <InputSelect id="categoriaid" class="form-group" @bind-Value="@subcategorias.CategoriaId">
                        <option value="-1">Categoria</option>
                        @foreach (var item in selCategorias){
                            <option value="@item.Id ">@item.Nome</option>
                        }
                    </InputSelect>
                </div>

                <div class="mb-3">
                    <label for="urlimagem" class="form-label">Imagem:</label>
                    <input id="urlimagem"
                           type="file"
                           name="subcategorias.ImageFile"
                           class="form-control"
                           accept=".png, .jpg, .jpeg"
                           onchange="document.getElementById('imagePreview').src = window.URL.createObjectURL(this.files[0])" />
                </div>

                <button type="submit" class="btn btn-primary"><img title="Gravar" src="/img/saveicon.png" style="height:30px" /></button>
                <a href="/subcategorias" type="button" class="btn btn-outline-secondary"><img title="Recuar" src="/img/backicon.png" style="height:30px" /></a>

            </EditForm>

            <div class="mt-3">
                @if (!string.IsNullOrEmpty(MensagemErro))
                {
                    <div class="alert alert-danger">@MensagemErro</div>
                }
                @if (!string.IsNullOrEmpty(MensagemSucesso))
                {
                    <div class="alert alert-success">@MensagemSucesso</div>
                }
            </div>

        </div>
    </div>
}
@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private SubCategorias? subcategorias { get; set; }

    List<Categorias> selCategorias = new List<Categorias>();

    public static string? uriActual;
    public static byte[]? imgActual { get; set; }

    public static string? catActual;
    public static int? catActualId;

    public string MensagemErro { get; set; } = string.Empty;
    public string MensagemSucesso { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        subcategorias ??= await context.SubCategorias.Include("Categoria").FirstOrDefaultAsync(m => m.Id == Id);

        if (subcategorias is null){
            NavigationManager.NavigateTo($"/subcategorias?message=SubCategoria não encontrada.");
            return;
        }

        else if (subcategorias!.UrlImagem is not null){
            uriActual = subcategorias.UrlImagem;

            if (subcategorias!.Imagem is not null)
                imgActual = subcategorias.Imagem;
        }

        if (subcategorias.CategoriaId < 0 || subcategorias.CategoriaId is null)
            subcategorias.CategoriaId = catActualId;
        else
            catActualId = subcategorias.CategoriaId;


        if (subcategorias!.Categoria is not null)
            catActual = subcategorias.Categoria.Nome;

        // catActualId = subcategorias.CategoriaId;

        selCategorias = context.Categorias
                        .OrderBy(x => x.Ordem)
                        .ToList();
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateSubCategorias()
    {

        if (string.IsNullOrWhiteSpace(subcategorias.Nome) || subcategorias.Ordem == 0){
            MensagemErro = "Os campos 'Nome' e 'Ordem' são obrigatórios.";
            return;
        }

        using var context = DbFactory.CreateDbContext();
        context.Attach(subcategorias!).State = EntityState.Modified;

        if (await context.SubCategorias.AnyAsync(c => c.Nome == subcategorias.Nome && c.Id != subcategorias.Id)){
            MensagemErro = "Já existe uma SubCategoria com este nome.";
            return;
        }

        try
        {
            if (subcategorias.CategoriaId == 0)
                subcategorias.CategoriaId = catActualId;

            if (subcategorias.UrlImagem == null && uriActual != null)
                subcategorias.UrlImagem = uriActual;

            if (subcategorias.Imagem == null && imgActual != null)
                subcategorias.Imagem = imgActual;

            if (subcategorias.ImageFile != null){

                if (subcategorias.ImageFile.Length > (200 * 1024)){
                    MensagemErro = "O tamanho da imagem excede o limite de 200 KB.";
                    return;
                }

                if (!isValidFileType(subcategorias.ImageFile)){
                    MensagemErro = "Tipo de arquivo inválido. Use .jpg, .jpeg ou .png.";
                    return;
                }
                else
                    subcategorias.UrlImagem = subcategorias.ImageFile.FileName;

                using (var dataStream = new MemoryStream())
                {
                    await subcategorias.ImageFile.CopyToAsync(dataStream);
                    subcategorias.Imagem = dataStream.ToArray();
                }

            }

            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException){
            if (!SubCategoriasExists(subcategorias!.Id))
                NavigationManager.NavigateTo("/subcategorias?message= Erro ao editar SubCategoria");
            else
                throw;
        }

        NavigationManager.NavigateTo($"/subcategorias?message=SubCategoria editada com sucesso.");
    }


    bool isValidFileType(IFormFile file)
    {
        string ext = Path.GetExtension(file.FileName);
        return ext.ToLower() switch
        {
            ".jpg" => true,
            ".jpeg" => true,
            ".png" => true,
            _ => false
        };
    }


    private bool SubCategoriasExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.SubCategorias.Any(e => e.Id == id);
    }
}
