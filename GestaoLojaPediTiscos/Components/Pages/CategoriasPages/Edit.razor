@page "/categorias/edit"

@*@attribute [Authorize(Roles = "Admin, Funcionario")]*@

@using Microsoft.EntityFrameworkCore
@using GestaoLojaPediTiscos.Entities
@inject IDbContextFactory<GestaoLojaPediTiscos.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Editar</PageTitle>

<h1>Editar registo</h1>

<h4>Categoria</h4>
<hr />
@if (categorias is null){
    <p><em>Carregando...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="categorias" OnValidSubmit="UpdateCategorias" enctype="multipart/form-data" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="categorias.Id" value="@categorias.Id" />

                <div class="mb-3">
                    <div>
                        @if (categorias.Imagem is not null){
                            <img title="Imagem Actual: @categorias.UrlImagem" id="imagePreview" class="img-thumbnail  mt-2" src="data:image/*;base64,@(Convert.ToBase64String(categorias.Imagem))" style="width:100px">
                        }
                        else{
                            <img id="imagePreview" class="img-thumbnail mt-2" src="img/noproductstrans.png" style="width:200px;">
                        }
                    </div>

                    <label for="nome" class="form-label">Nome:</label>
                    <InputText id="nome" @bind-Value="categorias.Nome" class="form-control" />
                    <ValidationMessage For="() => categorias.Nome" class="text-danger" />

                </div>
                <div class="mb-3">

                    <label for="ordem" class="form-label">Ordem:</label>
                    <InputNumber id="ordem" @bind-Value="categorias.Ordem" class="form-control" />
                    <ValidationMessage For="() => categorias.Ordem" class="text-danger" />

                </div>

                <div class="mb-3">
                    <label for="imageUri" class="form-label">Nova Imagem:</label>
                    <input id="imageUri"
                           type="file"
                           name="categorias.ImageFile"
                           class="form-control"
                           accept=".png, .jpg, .jpeg"
                           onchange="document.getElementById('imagePreview').src = window.URL.createObjectURL(this.files[0])" />
                </div>

                <button type="submit" class="btn btn-primary"><img title="Gravar" src="/img/saveicon.png" style="height:30px" /></button>
                <a href="/categorias" type="button" class="btn btn-outline-secondary"><img title="Recuar" src="/img/backicon.png" style="height:30px" /></a>
            </EditForm>

            <div class="mt-3">
                @if (!string.IsNullOrEmpty(MensagemErro))
                {
                    <div class="alert alert-danger">@MensagemErro</div>
                }
                @if (!string.IsNullOrEmpty(MensagemSucesso))
                {
                    <div class="alert alert-success">@MensagemSucesso</div>
                }
            </div>

        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Categorias? categorias { get; set; }

    public static string? uriActual;
    public static byte[]? imgActual { get; set; }

    public string MensagemErro { get; set; } = string.Empty;
    public string MensagemSucesso { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        categorias ??= await context.Categorias.FirstOrDefaultAsync(m => m.Id == Id);

        if (categorias is null){
            NavigationManager.NavigateTo($"/categorias?message=Categoria não encontrada.");
            return;
        }

        else if (categorias!.UrlImagem is not null){
            uriActual = categorias.UrlImagem;

        if (categorias!.Imagem is not null)
            imgActual = categorias.Imagem;
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateCategorias()
    {

        if (string.IsNullOrWhiteSpace(categorias.Nome) || categorias.Ordem == 0){
            MensagemErro = "Os campos 'Nome' e 'Ordem' são obrigatórios.";
            return;
        }

        using var context = DbFactory.CreateDbContext();
        context.Attach(categorias!).State = EntityState.Modified;

        if (await context.Categorias.AnyAsync(c => c.Nome == categorias.Nome && c.Id != categorias.Id)){
            MensagemErro = "Já existe uma categoria com este nome.";
            return;
        }

        try{

            // if (categorias.UrlImagem is null)
            //     categorias.UrlImagem = uriActual;

            // if (categorias.Imagem is null)
            //     categorias.Imagem = imgActual;

            if (categorias.UrlImagem == null && uriActual != null)
                categorias.UrlImagem = uriActual;

            if (categorias.Imagem == null && imgActual != null)
                categorias.Imagem = imgActual;


            if (categorias.ImageFile != null){

                if (categorias.ImageFile.Length > (200 * 1024)){
                    MensagemErro = "O tamanho da imagem excede o limite de 200 KB.";
                    return;
                }

                if (!isValidFileType(categorias.ImageFile)){
                    MensagemErro = "Tipo de arquivo inválido. Use .jpg, .jpeg ou .png.";
                    return;
                }
                else 
                    categorias.UrlImagem = categorias.ImageFile.FileName;

                using (var dataStream = new MemoryStream())
                {
                    await categorias.ImageFile.CopyToAsync(dataStream);
                    categorias.Imagem = dataStream.ToArray();
                }

            }

            await context.SaveChangesAsync();
        }
        // catch (Exception ex){
        //     MensagemErro = $"Erro ao editar categoria: {ex.Message}";
        // }

        // NavigationManager.NavigateTo($"/categorias?message=Categoria editada com sucesso.");

        catch (DbUpdateConcurrencyException){
            if (!CategoriasExists(categorias!.Id))
                NavigationManager.NavigateTo("/categorias?message= Erro ao editar categoria");
            else
                throw;
        }

        NavigationManager.NavigateTo($"/categorias?message=Categoria editada com sucesso.");
    }

    bool isValidFileType(IFormFile file)
    {
        string ext = Path.GetExtension(file.FileName);
        return ext.ToLower() switch
        {
            ".jpg" => true,
            ".jpeg" => true,
            ".png" => true,
            _ => false
        };
    }

    // bool isValidFileType(IFormFile file)
    // {
    //     string ext = Path.GetExtension(file.Name);
    //     switch (ext.ToLower())
    //     {
    //         case ".jpg":
    //             return true;
    //         case ".jpeg":
    //             return true;
    //         case ".png":
    //             return true;
    //         default:
    //             return false;
    //     }
    // }

    private bool CategoriasExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Categorias.Any(e => e.Id == id);
    }
}
