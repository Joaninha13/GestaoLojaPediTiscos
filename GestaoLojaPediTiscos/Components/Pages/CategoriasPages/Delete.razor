@page "/categorias/delete"


@*@attribute [Authorize(Roles = "Admin, Funcionario")]*@

@using Microsoft.EntityFrameworkCore
@using GestaoLojaPediTiscos.Entities
@inject IDbContextFactory<GestaoLojaPediTiscos.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Apagar</PageTitle>

<h1>Apagar registo</h1>

<h3>Tem a certeza de que quer apagar este registo?</h3>
<div>
    <h2>Categorias</h2>
    <hr />
    @if (categorias is null){
        <p><em>Carregando...</em></p>
    }
    else {
        <dl class="row">
            <dd>
                <div>
                    @if (categorias.Imagem is not null){
                                <img title="@categorias.UrlImagem" id="imagePreview" class="img-thumbnail  mt-2" src="data:image/*;base64,@(Convert.ToBase64String(categorias.Imagem))" style="width:100px">
                    }
                    else{
                        <img id="imagePreview" class="img-thumbnail mt-2" src="img/noproductstrans.png" style="width:100px;">
                    }
                </div>
            </dd>

            <dt class="col-sm-2">Nome</dt>
            <dd class="col-sm-10">@categorias.Nome</dd>

        </dl>

        <dl class="row">
            <dt class="col-sm-2">Ordem</dt>
            <dd class="col-sm-10">@categorias.Ordem</dd>
        </dl>

        <EditForm method="post" Model="categorias" OnValidSubmit="DeleteCategorias" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(categorias is null)" onclick="return confirm('Tem a certeza que deseja apagar este registo?')"><img title="Apagar" src="/img/deleteicon.png" style="height:30px" /></button> |
            <a href="/categorias" type="button" class="btn btn-outline-secondary"><img title="Recuar" src="/img/backicon.png" style="height:30px" /></a>
        </EditForm>
    }
</div>

@code {
    private Categorias? categorias;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync(){

        using var context = DbFactory.CreateDbContext();
        categorias = await context.Categorias.FirstOrDefaultAsync(m => m.Id == Id);

        if (categorias is null)
            NavigationManager.NavigateTo("/categorias");
    }

    private async Task DeleteCategorias()
    {
        if (categorias is null)
            return;

        using var context = DbFactory.CreateDbContext();

        //try
        //{
            // Verifica se há SubCategorias associadas à Categoria
            var hasSubCategorias = await context.SubCategorias.AnyAsync(sc => sc.CategoriaId == categorias.Id);
            if (hasSubCategorias){
                // Exibe uma mensagem ao usuário e não apaga
                NavigationManager.NavigateTo($"/categorias?message=Erro: Não é possível apagar a categoria porque há subcategorias associadas.");
                return;
            }

            // Remove a Categoria
            context.Categorias.Remove(categorias);
            await context.SaveChangesAsync();
            // Redireciona para a lista com a mensagem de sucesso
            // NavigationManager.NavigateTo($"/categorias?message=Categoria apagada com sucesso");
            //NavigationManager.NavigateTo("/categorias");

        //}
        //catch (Exception ex){
            // Em caso de erro, exibe uma mensagem
            //Console.WriteLine($"Erro ao apagar categoria: {ex.Message}");
            // Redireciona para a lista com a mensagem de sucesso
            NavigationManager.NavigateTo($"/categorias?message=Categoria apagada com sucesso");
        //}
    }
}
