@page "/produtos"

@attribute [Authorize(Roles = "Admin, Funcionario")]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using GestaoLojaPediTiscos.Entities
@using GestaoLojaPediTiscos.Data

@rendermode InteractiveServer

@implements IAsyncDisposable

@inject IDbContextFactory<GestaoLojaPediTiscos.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>

<h1>Listagem de Produtos</h1>

@* Para Mensagens *@
@{
    var query = new Uri(NavigationManager.Uri).Query;
    var message = System.Web.HttpUtility.ParseQueryString(query).Get("message");
    if (!string.IsNullOrEmpty(message)){
        <div class="alert alert-success">@message</div>
    }
}

<p>
    <a title="Novo Produto!" href="produtos/create"><img src="/img/novo.png" style="height:50px" /></a>
</p>

<QuickGrid Class="table" Items="@produtosQueryable" @ref="refgrid" Pagination="@pagination">
        <TemplateColumn Context="produtos">
            @if (produtos.Imagem is not null){
                <img title="Imagem Actual: @produtos.UrlImagem" id="imagePreview"
                 class="img-thumbnail  mt-2" src="data:image/*;base64,@(Convert.ToBase64String(produtos.Imagem))" style="width:100px">
            }
            else{
                <img id="imagePreview" class="img-thumbnail mt-2" src="img/noproductstrans.png" style="width:100px;">
            }
        </TemplateColumn>

    <PropertyColumn Property="produtos => produtos.Nome" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @onchange="PesquisaProduto" placeholder="Produto nome..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
    <PropertyColumn Property="produtos => produtos.Descricao" />

    <PropertyColumn Title="Disponivel" Property="produtos => produtos.Disponivel" Sortable="true"/>

    <PropertyColumn Title="Preço" Property="produtos => produtos.Preco" Sortable="true" />

    <PropertyColumn Title="Stock" Property="produtos => produtos.Stock" Sortable="true" />

    <PropertyColumn Title="NVendas" Property="produtos => produtos.NVendas" Sortable="true" />

    <PropertyColumn Title="SubCategoria" Property="produtos => produtos.SubCategoria.Nome" Sortable="true" />

    <TemplateColumn Context="produtos">
        <a title="Editar" href="@($"produtos/edit?id={produtos.Id}")"><img title="Editar" src="/img/editicon.png" style="height:30px" /></a> |
        <a title="Detalhes" href="@($"produtos/details?id={produtos.Id}")"><img title="Detalhes" src="/img/detailsicon.png" style="height:30px" /></a> |
        <a title="Apagar" href="@($"produtos/delete?id={produtos.Id}")"><img title="Apagar" src="/img/deleteicon.png" style="height:30px" /></a>
    </TemplateColumn>
</QuickGrid>
<div class="page-size-chooser"
     Produtos :
    <select @bind="@pagination.ItemsPerPage">
        <option>5</option>
        <option>10</option>
        <option>15</option>
    </select>
</div>
<div class="card-footer"><Paginator State="@pagination" /></div>

@code {
    private ApplicationDbContext context = default!;

    QuickGrid<Produtos>? refgrid;

    // Paginação
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };

    List<Produtos> produtosList = new();
    IQueryable<Produtos>? produtosQueryable;


    protected override void OnInitialized(){
        context = DbFactory.CreateDbContext();
        produtosQueryable = Enumerable.Empty<Produtos>().AsQueryable();


        CarregaProdutos();
        ConvertListToQueryable();
    }

    private IList<Produtos> CarregaProdutos()
    {
        produtosList = context.Produtos
            .Include("SubCategoria")
            .OrderBy(x => x.Nome)
            .ThenBy(a => a.Disponivel)
            .ToList();
        return produtosList;
    }

    // Converte Lista para Queryable
    private void ConvertListToQueryable()
    {
        produtosQueryable = Enumerable.Empty<Produtos>().AsQueryable();

        if (produtosList is null) return;

        foreach (var subcategoria in produtosList.OrderBy(o => o.Id))
            produtosQueryable = produtosQueryable.Concat(new[] { subcategoria }.AsQueryable());
    }

    // Pesquisa por Nome
    void PesquisaProduto(ChangeEventArgs e){
        if (!string.IsNullOrEmpty(e.Value!.ToString())){
            var result = produtosQueryable.Where(c => c.Nome!.Contains(e.Value!.ToString()!, StringComparison.CurrentCultureIgnoreCase)).ToList();
            produtosQueryable = Enumerable.Empty<Produtos>().AsQueryable();

            if (result.Count == 0)
                return;

            if (result.Any())
                foreach (var subcategoria in result.OrderBy(o => o.Id))
                    produtosQueryable = produtosQueryable.Concat(new[] { subcategoria }.AsQueryable());
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
